import pygame
from pygame import mixer
pygame.mixer.init()
from playsound import playsound
import tkinter as tk
from tkinter import *
import random

pygame.mixer.init()
pygame.font.init() #intializing the font

# global variables
@@ -14,7 +16,7 @@ play_height = 600  #600 // 20 = 30 height per block
block_size = 30
global row_no

pygame.mixer.init()# initialise the pygame

top_left_x = (s_width - play_width) // 2
top_left_y = s_height - play_height

@@ -135,18 +137,45 @@ class Piece(object):
        self.color = shape_colors[shapes.index(shape)]
        self.rotation = 0 # number from 0-possible rotations

class Button(pygame.sprite.Sprite):
    def _init_(self, img, scale, x, y):
        super(Button, self)._init_()
        self.image = img
        self.scale = scale
        self.image = pygame.transform.scale(self.image, self.scale)
logo_img = pygame.image.load('0270d405cf775da.png')
win_bg_img = pygame.image.load('Tetris-Logo1.jpg')
tetris_bg_img = pygame.image.load('tetris-wallpaper.jpg')
game_over_img = pygame.image.load('game_over.png')
help_img = pygame.image.load('help.png')
start_img = pygame.image.load('restart.png')
exit_img = pygame.image.load('exit_button.png')

class Button():
    def __init__(self, x, y, image, scale):
        width = image.get_width()
        height = image.get_height()
        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.rect.topleft = (x,y)
        self.clicked = False

    def draw(self, win):
        win.blit(self.image, self.rect)
        action = False
        pos = pygame.mouse.get_pos()
        if self.rect.collidepoint(pos):
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked == False:
                self.clicked = True
                action = True

        if pygame.mouse.get_pressed()[0] == 0:
            self.clicked = False
        win.blit(self.image, (self.rect.x, self.rect.y))

        return action

#logo_button = Button(40, 50, logo_img, 0.5)
logo_button = Button(110, 90, logo_img, 1.5)
win_bg_button = Button(285, 5, win_bg_img, 0.35)
tetris_bg = Button(-10, 0, tetris_bg_img, 1.15)
game_over_button = Button(220, 350, game_over_img, 0.6)
help_button = Button(60, 170, help_img, 0.2)
start_button = Button(50, 300, start_img, 0.5)
exit_button = Button(50, 450, exit_img, 0.5)

#home = pygame.image.load('homeBtn.png')
#home_btn = Button(home, (24,24), s_width - 750, s_height/2 - 100)
@@ -256,8 +285,8 @@ def clear_rows(grid, locked):
    count = 0
    row_no = inc

    pygame.mixer.Sound('mixkit-casino-bling-achievement-2067.wav')
    pygame.mixer.music.play(loops=0)
    #pygame.mixer.Sound('mixkit-casino-bling-achievement-2067.wav')
    #pygame.mixer.music.play(loops=0)

    if row_no == 2:
        #playsound('mixkit-casino-bling-achievement-2067.wav')
@@ -282,48 +311,99 @@ def clear_rows(grid, locked):
    return inc  #how many rows we ended up clearing

def draw_next_shape(shape, surface):
    font = pygame.font.SysFont('lucidaconsole', 30)
    font = pygame.font.SysFont('couriernew', 30, bold = True)
    label = font.render('Next Shape', 1, (0,0,100))

    sx = top_left_x + play_width + 50
    sy = top_left_y + play_height/2 - 100
    format = shape.shape[shape.rotation % len(shape.shape)]  #we want the intial shape


    for i, line in enumerate(format):
        row = list(line)
        for j, column in enumerate(row):

            pygame.draw.rect(surface, (0,0,0), (sx + j*block_size, sy + i*block_size, block_size, block_size), 0)
            if column == '0':
                pygame.draw.rect(surface, shape.color, (sx + j*block_size, sy + i*block_size, block_size, block_size), 0)
            for x in range(len(row)):
                pygame.draw.line(surface, (235,245,255), (sx, sy + x*block_size), (sx+150, sy+ x*block_size))
                for j in range(len(row)):
                    pygame.draw.line(surface, (235,245,255), (sx + j*block_size, sy),(sx + j*block_size, sy + 150))


    surface.blit(label, (sx + 5, sy - 50))
    surface.blit(label, (sx - 10, sy - 50))

def draw_window(surface, grid, score=0):
    surface.fill((165,137,193))
    # Tetris Title
    win_bg_button.draw(surface)
    pygame.font.init()
    font = pygame.font.SysFont('constantia', 70)
    label = font.render('Tetris!', 1, (0,0,100))

    surface.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 10))
    label = font.render('TETRIS!', 1, (0,0,100))
    #surface.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 20))

    #Buttons
    '''startButton = tk.Button(height=2, width=9,background='yellow',foreground='black',font=('Coolvetica Rg',20),text="Start",command=)
    startButton.pack()
    startButton.place(x=200,y=150)'''
    #exitButton = tk.Button(height=2, width=9,background='yellow',foreground='black',font=('Coolvetica Rg',20), text="Exit", command = destroy)
    #exitButton.pack()
    #exitButton.place(x=200,y=170)


    # current score
    font = pygame.font.SysFont('lucidaconsole', 30)
    font = pygame.font.SysFont('couriernew', 30, bold = True)
    label = font.render('Score: ' + str(score), 1, (0,0,100))
    sx = top_left_x + play_width + 50
    sy = top_left_y + play_height/2 - 100
    surface.blit(label, (sx + 20, sy + 160))
    surface.blit(label, (sx + 3, sy + 180))

    #pygame.draw.rect(surface, (0,0,0), (sx + 60, sy + 60, ))

    for i in range(len(grid)):
        for j in range(len(grid[i])):
            pygame.draw.rect(surface, grid[i][j], (top_left_x + j*block_size, top_left_y + i*block_size, block_size, block_size), 0)

    pygame.draw.rect(surface, (235,245,255), (top_left_x - 9, top_left_y - 9, play_width + 15, play_height + 9), 9)
    pygame.draw.rect(surface, (235,245,255), (sx - 5, sy - 6, play_width/2 + 10, play_height/4 + 10), 5)

    draw_grid(surface, grid)
    #pygame.display.update()
    #pygame.display.update() 

def help():
    root = Tk()
    root.title('Help!')
    root.geometry('1900x1000')
    var1 = "Rules to play Ping Pong:"
    var2 = "To contol the paddle,"
    var3 =  " has to use Q ey for moving UP \n and A key for moving DOWN"
    var4 = "and "+ " has to use P key \n for moving UP and L for moving DOWN."
    splashLabel2 = Label(root, background='pink', font=("Helvetica", 18), text=var1)
    splashLabel2.pack()
    splashLabel2.place(x=650, y=350)
    splashLabel3 = Label(root,background='pink',font=("Helvetica", 18),text=var2)
    splashLabel3.pack()
    splashLabel3.place(x=0,y=380)
    splashLabel4 = Label(root,background='pink',font=('Helvetica', 18),text=var3)
    splashLabel4.pack()
    splashLabel4.place(x=0,y=420)
    splashLabel5 = Label(root, background='pink', font=('Helvetica', 18), text=var4)
    splashLabel5.pack()
    splashLabel5.place(x=850, y=420)
    splashLabel6 = Label(root,highlightthickness=5,height=2,width=5,background='white',font=('Helvetica',18),text="Q")
    splashLabel6.pack()
    splashLabel6.place(x=200,y=490)
    splashLabel7 = Label(root,highlightthickness=5, height=2, width=5, background='white', font=('Helvetica', 18), text="A")
    splashLabel7.pack()
    splashLabel7.place(x=200, y=550)
    splashLabel8 = Label(root,highlightthickness=5,height=2,width=5,background='white',font=('Helvetica',18),text="P")
    splashLabel8.pack()
    splashLabel8.place(x=1200,y=490)
    splashLabel9 = Label(root,highlightthickness=5,height=2,width=5,background='white',font=('Helvetica',18),text="L")
    splashLabel9.pack()
    playButton = tk.Button(root,height=2,width=9,background='yellow',font=('Helvetica',18),text="Play",command=main)
    playButton.pack()
    playButton.place(x=700,y=550)


def main(win): 
    #last_score = max_score()
@@ -342,8 +422,7 @@ def main(win):

    while run:

#Background Sound

        #Background Sound
        grid = create_grid(locked_positions)
        fall_time += clock.get_rawtime() #this gets how long the while loop took to run
        level_time += clock.get_rawtime()
@@ -365,13 +444,15 @@ def main(win):
            if event.type == pygame.QUIT:
                run = False
                pygame.display.quit()


            if help_button.draw(win):
                help()

            if event.type == pygame.KEYDOWN:

                if event.key == pygame.K_ESCAPE:

                    run = False
                

                if event.key == pygame.K_LEFT:
                    current_piece.x -= 1
                    if not(valid_space(current_piece, grid)):
@@ -414,37 +495,58 @@ def main(win):

        draw_window(win, grid, score)
        draw_next_shape(next_piece, win)
        #if start_button.draw(win):
            #run = False

        if start_button.draw(win):
            run = False
        if exit_button.draw(win):
            pygame.display.quit()
        pygame.display.update()

        #Checks if user lost
        if check_lost(locked_positions):

            draw_text_middle(win, "G A M E  O V E R", 60, (255,255,100))
            game_over_button.draw(win)
            pygame.display.update()
            #mixer.music.load('game_over_sound.mp3')
            #mixer.music.play(loops = 0)
            #draw_text_middle(win, "G A M E  O V E R", 60, (255,255,100))
            pygame.time.delay(1500)
            #playsound('mixkit-casino-bling-achievement-2067.wav')
            run = False


def main_menu(win):  
    run = True
    while run:

        win.fill((253,222,238))
        win.fill((255,255,100))
        #tetris_bg.draw(win)
        logo_button.draw(win)
        pygame.font.init()
        font = pygame.font.SysFont('constantia', 120)
        label = font.render('TETRIS!', 1, (0,0,100))
        #pygame.draw.rect(win, (0,0,0), (top_left_x-250 ,top_left_y+500, s_width , s_height/4), 0)
        #win.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 250))

        '''if start_button.draw(win):
            main(win)
        if exit_button.draw(win):
            run = False'''

        font = pygame.font.SysFont('couriernew', 40, bold = True)
        label = font.render('Press Any Key To Play!', 1, (0,0,100))

        win.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 250))

        draw_text_middle(win, 'Press Any Key To Play', 40, (165,137,193))
        win.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 500))
        #draw_text_middle(win, 'Press Any Key To Play', 40, (165,137,193))
        pygame.display.update()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                main(win)

    
    #home_btn.draw(win)
    #pygame.dispaly.update()
    pygame.display.quit()

win = pygame.display.set_mode((s_width, s_height))
